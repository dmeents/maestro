[["C:\\Users\\dmeen\\Documents\\GitHub\\maestro\\src\\eslint\\index.test.ts",{"fileContent":"describe('eslint', () => {\n  it('should not fail', () => {\n    expect(true).toEqual(true);\n  });\n});\n\nexport {};\n","resolvedModuleNames":[]}],["C:\\Users\\dmeen\\Documents\\GitHub\\maestro\\src\\index.ts",{"fileContent":"import eslint from './eslint';\nimport jest from './jest';\nimport prettier from './prettier';\nimport semantic from './semantic-release';\n\nexport = {\n  eslint,\n  prettier,\n  semantic,\n  jest,\n};\n","resolvedModuleNames":["C:/Users/dmeen/Documents/GitHub/maestro/src/eslint/index.ts","C:/Users/dmeen/Documents/GitHub/maestro/src/jest/index.ts","C:/Users/dmeen/Documents/GitHub/maestro/src/prettier/index.ts","C:/Users/dmeen/Documents/GitHub/maestro/src/semantic-release/index.ts"]}],["C:\\Users\\dmeen\\Documents\\GitHub\\maestro\\src\\eslint\\index.ts",{"fileContent":"const base = {\n  extends: ['airbnb', 'airbnb/hooks', 'prettier'],\n  plugins: ['react', 'prettier'],\n  rules: {\n    'import/prefer-default-export': 0,\n    'no-plusplus': 0,\n    'no-restricted-syntax': 0,\n    'no-await-in-loop': 0,\n  },\n};\n\nconst typescript = {\n  extends: ['airbnb-typescript'],\n  plugins: ['@typescript-eslint'],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    project: './tsconfig.json',\n    createDefaultProgram: true,\n  },\n  env: {\n    node: true,\n    jest: true,\n  },\n  rules: {},\n};\n\ninterface Config {\n  isTypescript?: boolean;\n}\n\nexport default function eslint({ isTypescript = false }: Config) {\n  const baseConfig = { ...base };\n\n  if (!isTypescript) return baseConfig;\n\n  const {\n    extends: tsExtends,\n    rules: tsRules,\n    plugins: tsPlugins,\n    ...other\n  } = typescript;\n\n  return {\n    ...other,\n    extends: [...baseConfig.extends, ...tsExtends],\n    plugins: [...baseConfig.plugins, ...tsPlugins],\n    rules: { ...baseConfig.rules, ...tsRules },\n  };\n}\n","resolvedModuleNames":[]}],["C:\\Users\\dmeen\\Documents\\GitHub\\maestro\\src\\jest\\index.ts",{"fileContent":"const baseConfig = (\n  packageName: string,\n  namespace?: string,\n  tsconfig?: string,\n) => {\n  const config: any = {\n    cacheDirectory: '.jest-cache',\n    id: packageName,\n    displayName: packageName,\n    reporters: ['default', 'jest-junit'],\n    transformIgnorePatterns: ['node_modules', '.dist', 'setupTests.js'],\n    collectCoverageFrom: ['<rootDir>/src/**/*.{ts,tsx}'],\n    coverageDirectory: '<rootDir>/coverage/',\n  };\n\n  if (namespace) {\n    config.moduleNameWrapper = { [`^@${namespace}/(.*)$`]: './packages/$1' };\n  }\n\n  if (tsconfig) {\n    config.transform = {\n      '\\\\.tsx?$': ['ts-jest', { tsconfig }],\n    };\n  }\n\n  return config;\n};\n\nconst directoryConfigs = (packageName: string, namespace?: string) => {\n  if (namespace) {\n    return {\n      rootDir: '../../',\n      roots: [`./packages/${packageName}`],\n      testRegex: `./packages/${packageName}/*.{tsx,ts,js,jsx}`,\n    };\n  }\n\n  return {};\n};\n\nconst rootConfig = (namespace?: string) => {\n  if (namespace) {\n    return { projects: ['./packages/*/jest.config.js'] };\n  }\n\n  return {};\n};\n\ninterface JestConfig {\n  // the name of the package to test\n  packageName: string;\n  // is this the root config (in a monorepo)\n  isRoot?: boolean;\n  // should this run in an node or jsdom environment\n  isNode?: boolean;\n  // the namespace of the monorepo (determines if this config is for monorepos)\n  namespace?: string;\n  // the path to the tsconfig (only for typescript)\n  tsconfig?: string;\n}\n\nexport default function jest({\n  isRoot = false,\n  packageName,\n  namespace,\n  tsconfig,\n  isNode,\n}: JestConfig) {\n  if (isRoot) return rootConfig(namespace);\n\n  return {\n    ...baseConfig(packageName, namespace, tsconfig),\n    ...directoryConfigs(packageName, namespace),\n    testEnvironment: isNode ? 'node' : 'jsdom',\n  };\n}\n","resolvedModuleNames":[]}],["C:\\Users\\dmeen\\Documents\\GitHub\\maestro\\src\\prettier\\index.ts",{"fileContent":"export default function prettier() {\n  return {\n    arrowParens: 'avoid',\n    jsxBracketSameLine: true,\n    singleQuote: true,\n    trailingComma: 'all',\n    bracketSpacing: true,\n    quoteProps: 'consistent',\n  };\n}\n","resolvedModuleNames":[]}],["C:\\Users\\dmeen\\Documents\\GitHub\\maestro\\src\\semantic-release\\index.ts",{"fileContent":"/* eslint-disable no-template-curly-in-string */\ninterface SemanticReleaseConfig {\n  isMonorepo?: boolean;\n  publishToNpm?: boolean;\n  branches?: Array<string>;\n}\n\nexport default function semanticRelease({\n  isMonorepo = false,\n  publishToNpm = false,\n  branches = ['main'],\n}: SemanticReleaseConfig) {\n  return {\n    branches,\n    extends: isMonorepo ? ['semantic-release-monorepo'] : [],\n    plugins: [\n      '@semantic-release/commit-analyzer',\n      '@semantic-release/release-notes-generator',\n      ['@suin/semantic-release-yarn', { npmPublish: publishToNpm }],\n      [\n        '@semantic-release/git',\n        {\n          assets: ['package.json', 'dist/**/*'],\n          message:\n            'chore(release): ${nextRelease.version} [skip ci]\\n\\n${nextRelease.notes}',\n        },\n      ],\n      ['@semantic-release/github', { assets: './*.tgz' }],\n    ],\n  };\n}\n","resolvedModuleNames":[]}]]