name: 'Deploy Terraform'
description: 'standardized deployment job for terraform'

inputs:
  environment:
    description: 'the environment to deploy to'
    required: true
  githubToken:
    description: 'the github token'
    required: true
  terraformConfigPath:
    description: 'the path to the terraform config files'
    required: true
  backendAccessKey:
    description: 'the backend-config access key to use'
    required: true
  backendSecretKey:
    description: 'the backend-config secret key to use'
    required: true
  backendKey:
    description: 'the bucket name of the remote terraform config'
    required: true
  containerImage:
    description: 'the docker image to deploy'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup terraform
      uses: hashicorp/setup-terraform@v2

    - name: Verify terraform
      id: verify
      shell: bash
      run: |
        terraform fmt -check

    - name: Init terraform
      id: init
      shell: bash
      run: |
        terraform -chdir=${{ inputs.terraformConfigPath }} init \
          -input=false \
          -no-color \
          -backend-config='access_key=${{ inputs.backendAccessKey }}' \
          -backend-config='secret_key=${{ inputs.backendSecretKey }}' \
          -backend-config='key=${{ inputs.backendKey }}'

    - name: Validate terraform
      id: validate
      shell: bash
      run: |
        terraform validate -no-color

    - name: Run terraform plan
      id: plan
      shell: bash
      continue-on-error: true
      run: |
        terraform -chdir=${{ inputs.terraformConfigPath }} plan \
          -input=false \
          -compact-warnings \
          -var 'container_image=${{ inputs.containerImage }}' \
          -var-file ${{ inputs.terraformConfigPath }}/env.${{ inputs.environment }}.tfvars

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ inputs.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      shell: bash
      run: |
        exit 1
