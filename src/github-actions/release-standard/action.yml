name: 'Release Standard'
description: 'standardized release job'
author: 'david@allido.io'

inputs:
  packageName:
    description: 'the package to build'
    required: true
  nodeVersion:
    description: 'which node version to use'
    required: false
    default: 'latest'
  namespace:
    description: 'the monorepo namespace'
    required: false
    default: 'undefined'
  npmToken:
    description: 'the npm token to publish packages to npm'
    required: true
  githubToken:
    description: 'the github token required to push package changes to github'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.nodeVersion }}

    - name: Enable Corepack
      shell: bash
      run: corepack enable

    - name: Setup Yarn
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.nodeVersion }}
        cache: 'yarn'

    - name: Get built artifact
      if: ${{ inputs.namespace == 'undefined' }}
      uses: actions/download-artifact@master
      with:
        name: ${{ inputs.packageName }}-build-${{ github.sha }}
        path: .dist

    - name: Get built artifact for ${{ inputs.packageName }} in monorepo
      if: ${{ inputs.namespace != 'undefined' }}
      uses: actions/download-artifact@master
      with:
        name: ${{ inputs.packageName }}-build-${{ github.sha }}
        path: packages/${{ inputs.packageName }}/.dist

    - name: Yarn install
      shell: bash
      run: yarn install

    - name: Release package
      if: ${{ inputs.namespace == 'undefined' }}
      shell: bash
      run: |
        NPM_TOKEN=${{ inputs.npmToken }} GH_TOKEN=${{ inputs.githubToken }} yarn release

    - name: Release package ${{ inputs.packageName }} in monorepo
      if: ${{ inputs.namespace != 'undefined' }}
      shell: bash
      run: |
        NPM_TOKEN=${{ inputs.npmToken }} GH_TOKEN=${{ inputs.githubToken }} yarn workspace ${{ inputs.namespace }}/${{ inputs.packageName }} release

    - name: Save new package version
      if: ${{ inputs.namespace == 'undefined' }}
      shell: bash
      run: |
        PKG_VERSION=$(cat ./package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
        echo "${{ inputs.packageName }}_VERSION=$PKG_VERSION" >> $GITHUB_OUTPUT

    - name: Save new package version for monorepo
      if: ${{ inputs.namespace != 'undefined' }}
      shell: bash
      run: |
        PKG_VERSION=$(cat ./packages/${{ inputs.packageName }}/package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
        echo "${{ inputs.packageName }}_VERSION=$PKG_VERSION" >> $GITHUB_OUTPUT
